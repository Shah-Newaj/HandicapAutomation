{"name": "test_recruitment_request_ddt", "status": "broken", "statusDetails": {"message": "TypeError: 'datetime.datetime' object is not iterable", "trace": "self = <test_recruitmentRequest_DDT.Test_Recruitment_Request_DDT object at 0x000001D0CF4514D0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae5f6c60b6377b11420beae0cba9de1a\")>\n\n    def test_recruitment_request_ddt(self,setup):\n        self.logger.info(\"*************** Test_ddt_admin_Login *******************\")\n        self.logger.info(\"*************** Verifying Login DDT Test  *******************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n        self.lp = LoginPage(self.driver)\n        self.lp.setUserName(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        time.sleep(3)\n        self.logger.info(\"************* Login succesful **********\")\n    \n        self.logger.info(\"************* Starting Recruitment Request DDT **********\")\n    \n        self.rows = XLUtils.getRowCount(self.path, 'addRequest')\n        print(\"Number of rows in excel\", self.rows)\n    \n        lst_status = [] #Empty variable\n    \n        for r in range(2, self.rows+1):\n            self.project = XLUtils.readData(self.path,'addRequest', r, 1)\n            self.hmanager = XLUtils.readData(self.path, 'addRequest', r, 2)\n            self.vposition = XLUtils.readData(self.path, 'addRequest', r, 3)\n            self.jobdes = XLUtils.readData(self.path, 'addRequest', r, 4)\n            self.npos = XLUtils.readData(self.path, 'addRequest', r, 5)\n            self.pemployee = XLUtils.readData(self.path, 'addRequest', r, 6)\n            self.location = XLUtils.readData(self.path, 'addRequest', r, 7)\n            self.appointment = XLUtils.readData(self.path, 'addRequest', r, 8)\n            self.jobstartdate = XLUtils.readData(self.path, 'addRequest', r, 9)\n            self.jobenddate = XLUtils.readData(self.path, 'addRequest', r, 10)\n            self.vacancycaused = XLUtils.readData(self.path, 'addRequest', r, 11)\n            self.salaryrangefrom = XLUtils.readData(self.path, 'addRequest', r, 12)\n            self.recruitmenttype = XLUtils.readData(self.path, 'addRequest', r, 13)\n            self.hod = XLUtils.readData(self.path, 'addRequest', r, 14)\n            self.salaryrangeto = XLUtils.readData(self.path, 'addRequest', r, 15)\n            self.comments = XLUtils.readData(self.path, 'addRequest', r, 16)\n    \n    \n            self.addreq = HiringManager(self.driver)\n            self.addreq.clickRecruitmentRequest()\n            self.addreq.clickHiringManager()\n            self.addreq.clickAddNew()\n    \n            self.logger.info(\"************* Providing recruitment request info **********\")\n            self.addreq.selectProject(self.project)\n            self.addreq.setHiringManager(self.hmanager)\n            self.addreq.setVacantPosition(self.vposition)\n            self.addreq.selectJobDescription(self.jobdes)\n            self.addreq.setNumberofPosition(self.npos)\n            self.addreq.selectPresentEmployee(self.pemployee)\n            self.addreq.setLocation(self.location)\n            self.addreq.selectAppointment(self.appointment)\n            self.addreq.setJobStartDate(self.jobstartdate)\n            self.addreq.setJobEndingDate(self.jobenddate)\n            self.addreq.setVacancyCaused(self.vacancycaused)\n            self.addreq.setSalaryRangeFrom(self.salaryrangefrom)\n            self.addreq.selectRecruitmentType(self.recruitmenttype)\n            time.sleep(2)\n            self.addreq.selectHOD(self.hod)\n            self.addreq.setSalaryRangeTo(self.salaryrangeto)\n            self.addreq.setComments(self.comments)\n            time.sleep(3)\n            flag = self.driver.find_element(By.NAME, \"save_and_update\")\n            self.driver.execute_script(\"arguments[0].scrollIntoView();\", flag)\n            time.sleep(2)\n            # self.addreq.clickSubmit()\n    \n        self.logger.info(\"************* Starting Edit Recruitment Request DDT **********\")\n    \n        self.rows = XLUtils.getRowCount(self.path, 'editRequest')\n        print(\"Number of rows in excel\", self.rows)\n    \n        lst_status = []  # Empty variable\n    \n        for r in range(2, self.rows + 1):\n            self.project = XLUtils.readData(self.path, 'editRequest', r, 1)\n            self.hmanager = XLUtils.readData(self.path, 'editRequest', r, 2)\n            self.vposition = XLUtils.readData(self.path, 'editRequest', r, 3)\n            self.jobdes = XLUtils.readData(self.path, 'editRequest', r, 4)\n            self.npos = XLUtils.readData(self.path, 'editRequest', r, 5)\n            self.pemployee = XLUtils.readData(self.path, 'editRequest', r, 6)\n            self.location = XLUtils.readData(self.path, 'editRequest', r, 7)\n            self.appointment = XLUtils.readData(self.path, 'editRequest', r, 8)\n            self.jobstartdate = XLUtils.readData(self.path, 'editRequest', r, 9)\n            self.jobenddate = XLUtils.readData(self.path, 'editRequest', r, 10)\n            self.vacancycaused = XLUtils.readData(self.path, 'editRequest', r, 11)\n            self.salaryrangefrom = XLUtils.readData(self.path, 'editRequest', r, 12)\n            self.recruitmenttype = XLUtils.readData(self.path, 'editRequest', r, 13)\n            self.hod = XLUtils.readData(self.path, 'editRequest', r, 14)\n            self.salaryrangeto = XLUtils.readData(self.path, 'editRequest', r, 15)\n            self.comments = XLUtils.readData(self.path, 'editRequest', r, 16)\n    \n            self.editreq = HiringManager(self.driver)\n            self.editreq.clickRecruitmentRequest()\n            self.editreq.clickHiringManager()\n            self.editreq.clickEdit()\n    \n            self.logger.info(\"************* Providing edit recruitment request info **********\")\n            self.editreq.selectProject(self.project)\n            self.editreq.setHiringManager(self.hmanager)\n            self.editreq.setVacantPosition(self.vposition)\n            self.editreq.selectJobDescription(self.jobdes)\n            self.editreq.setNumberofPosition(self.npos)\n            self.editreq.selectPresentEmployee(self.pemployee)\n            self.editreq.setLocation(self.location)\n            self.editreq.selectAppointment(self.appointment)\n            self.editreq.setJobStartDate(self.jobstartdate)\n>           self.editreq.setJobEndingDate(self.jobenddate)\n\ntestCases\\RecruitmentRequestDDT\\test_recruitmentRequest_DDT.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\HiringManagerPage.py:88: in setJobEndingDate\n    self.driver.find_element(By.ID, self.txt_job_ending_date_id).send_keys(jobenddate)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:232: in send_keys\n    Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = (datetime.datetime(2025, 1, 10, 0, 0),)\n\n    def keys_to_typing(value: Iterable[AnyKey]) -> List[str]:\n        \"\"\"Processes the values that will be typed in the element.\"\"\"\n        characters: List[str] = []\n        for val in value:\n            if isinstance(val, Keys):\n                # Todo: Does this even work?\n                characters.append(val)\n            elif isinstance(val, (int, float)):\n                characters.extend(str(val))\n            else:\n>               characters.extend(val)\nE               TypeError: 'datetime.datetime' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\common\\utils.py:137: TypeError"}, "attachments": [{"name": "log", "source": "a6b577ef-e167-4c42-ab16-bc14c475daeb-attachment.txt", "type": "text/plain"}], "start": 1726711062667, "stop": 1726711096485, "uuid": "3a5085e9-50f8-49d6-9089-e926bf069fea", "historyId": "7bfb6d25aa37d399295247d243b5a30e", "testCaseId": "7bfb6d25aa37d399295247d243b5a30e", "fullName": "testCases.RecruitmentRequestDDT.test_recruitmentRequest_DDT.Test_Recruitment_Request_DDT#test_recruitment_request_ddt", "labels": [{"name": "parentSuite", "value": "testCases.RecruitmentRequestDDT"}, {"name": "suite", "value": "test_recruitmentRequest_DDT"}, {"name": "subSuite", "value": "Test_Recruitment_Request_DDT"}, {"name": "host", "value": "SCI-BD-L18-1814"}, {"name": "thread", "value": "21612-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.RecruitmentRequestDDT.test_recruitmentRequest_DDT"}]}